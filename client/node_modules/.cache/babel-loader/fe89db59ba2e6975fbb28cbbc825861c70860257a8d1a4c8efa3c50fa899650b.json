{"ast":null,"code":"import axios from 'axios';\nconst API_URL = '/api/transactions';\n\n// Get all transactions\nexport const getTransactions = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n      error: 'Failed to fetch transactions'\n    };\n  }\n};\n\n// Get transaction by id\nexport const getTransactionById = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n      error: 'Failed to fetch transaction'\n    };\n  }\n};\n\n// Add new transaction\nexport const addTransaction = async transaction => {\n  try {\n    const response = await axios.post(API_URL, transaction);\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n      error: 'Failed to add transaction'\n    };\n  }\n};\n\n// Update transaction\nexport const updateTransaction = async (id, transaction) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, transaction);\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n      error: 'Failed to update transaction'\n    };\n  }\n};\n\n// Delete transaction\nexport const deleteTransaction = async id => {\n  try {\n    const response = await axios.delete(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || {\n      error: 'Failed to delete transaction'\n    };\n  }\n};","map":{"version":3,"names":["axios","API_URL","getTransactions","response","get","data","error","_error$response","getTransactionById","id","_error$response2","addTransaction","transaction","post","_error$response3","updateTransaction","put","_error$response4","deleteTransaction","delete","_error$response5"],"sources":["C:/Users/pdmah/OneDrive/Desktop/Expense_T/client/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = '/api/transactions';\r\n\r\n// Get all transactions\r\nexport const getTransactions = async () => {\r\n  try {\r\n    const response = await axios.get(API_URL);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || { error: 'Failed to fetch transactions' };\r\n  }\r\n};\r\n\r\n// Get transaction by id\r\nexport const getTransactionById = async (id) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || { error: 'Failed to fetch transaction' };\r\n  }\r\n};\r\n\r\n// Add new transaction\r\nexport const addTransaction = async (transaction) => {\r\n  try {\r\n    const response = await axios.post(API_URL, transaction);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || { error: 'Failed to add transaction' };\r\n  }\r\n};\r\n\r\n// Update transaction\r\nexport const updateTransaction = async (id, transaction) => {\r\n  try {\r\n    const response = await axios.put(`${API_URL}/${id}`, transaction);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || { error: 'Failed to update transaction' };\r\n  }\r\n};\r\n\r\n// Delete transaction\r\nexport const deleteTransaction = async (id) => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL}/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || { error: 'Failed to delete transaction' };\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,mBAAmB;;AAEnC;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAACH,OAAO,CAAC;IACzC,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA;IACd,MAAM,EAAAA,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAI;MAAEC,KAAK,EAAE;IAA+B,CAAC;EACzE;AACF,CAAC;;AAED;AACA,OAAO,MAAME,kBAAkB,GAAG,MAAOC,EAAE,IAAK;EAC9C,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,IAAIQ,EAAE,EAAE,CAAC;IACpD,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAI,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAJ,KAAK,CAACH,QAAQ,cAAAO,gBAAA,uBAAdA,gBAAA,CAAgBL,IAAI,KAAI;MAAEC,KAAK,EAAE;IAA8B,CAAC;EACxE;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,cAAc,GAAG,MAAOC,WAAW,IAAK;EACnD,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMH,KAAK,CAACa,IAAI,CAACZ,OAAO,EAAEW,WAAW,CAAC;IACvD,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAQ,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAR,KAAK,CAACH,QAAQ,cAAAW,gBAAA,uBAAdA,gBAAA,CAAgBT,IAAI,KAAI;MAAEC,KAAK,EAAE;IAA4B,CAAC;EACtE;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,iBAAiB,GAAG,MAAAA,CAAON,EAAE,EAAEG,WAAW,KAAK;EAC1D,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMH,KAAK,CAACgB,GAAG,CAAC,GAAGf,OAAO,IAAIQ,EAAE,EAAE,EAAEG,WAAW,CAAC;IACjE,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAW,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAX,KAAK,CAACH,QAAQ,cAAAc,gBAAA,uBAAdA,gBAAA,CAAgBZ,IAAI,KAAI;MAAEC,KAAK,EAAE;IAA+B,CAAC;EACzE;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,iBAAiB,GAAG,MAAOT,EAAE,IAAK;EAC7C,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMH,KAAK,CAACmB,MAAM,CAAC,GAAGlB,OAAO,IAAIQ,EAAE,EAAE,CAAC;IACvD,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAc,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAd,KAAK,CAACH,QAAQ,cAAAiB,gBAAA,uBAAdA,gBAAA,CAAgBf,IAAI,KAAI;MAAEC,KAAK,EAAE;IAA+B,CAAC;EACzE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}